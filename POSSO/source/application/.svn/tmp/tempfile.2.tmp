//
//  PossoAppDelegate.m
//  Posso
//
//  Created by alex on 15/04/09.
//  Copyright Trollwerks Inc 2009. All rights reserved.
//

#import "PossoAppDelegate.h"
#import "ConfigureViewController.h"
#import "LogsViewController.h"

static void uncaughtExceptionHandler(NSException *exception)
{
	twlog("uncaughtExceptionHandler caught a CRASH! -- %@", exception);
}

@implementation PossoAppDelegate

@synthesize window;
@synthesize tabBarController;
@synthesize tabBar;
@synthesize token;
@synthesize baseURL;


#pragma mark -
#pragma mark Life cycle

- (void)applicationDidFinishLaunching:(UIApplication *)application
{
   (void)application;
   
   NSSetUncaughtExceptionHandler(&uncaughtExceptionHandler);

   [window addSubview:tabBarController.view];
   [self constructbaseURL];
   [self retrieveTokenID];
}

- (void)applicationDidReceiveMemoryWarning:(UIApplication *)application;
{
   (void)application;
   twlog("applicationDidReceiveMemoryWarning!! -- no action");
}

- (void)applicationWillTerminate:(UIApplication *)application
{
	(void)application;
   
   [[NSUserDefaults standardUserDefaults] synchronize];
   
   [self logout];
}

- (void)dealloc
{
   self.tabBarController = nil;
   self.tabBar = nil;
   self.window = nil;
   self.token = nil;
   [super dealloc];
}

#pragma mark -
#pragma mark Application support

+ (PossoAppDelegate *)appDelegate
{
  return (PossoAppDelegate *)[[UIApplication sharedApplication] delegate];
}

<<<<<<< .mine

- (void)constructbaseURL
{
	BOOL validConfiguration = YES;
	
	NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
	NSString *scheme = [defaults boolForKey:kSavedUseSSL] ? @"https" : @"http";
	NSString *host = [defaults stringForKey:kSavedServerHost];
	validConfiguration &= 0 < host.length;
	NSString *port = [defaults stringForKey:kSavedServerPort];
	validConfiguration &= 0 < port.length;
	NSString *uri = [defaults stringForKey:kSavedServerURI];
	validConfiguration &= 0 < uri.length;
	twcheck(validConfiguration);
	
	if (!validConfiguration)
		return;
	self.baseURL = [NSString
					   stringWithFormat:@"%@://%@:%@/%@/identity/",
					   scheme,
					   host,
					   port,
					   uri
					];	
}	

- (void)retrieveTokenID
=======
- (NSString *)baseURL
>>>>>>> .r95
{
   NSString *result = nil;
<<<<<<< .mine
	BOOL validConfiguration = YES;
	NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
	NSString *login = [defaults stringForKey:kSavedLoginID];
	validConfiguration &= 0 < login.length;
	NSString *password = [defaults stringForKey:kSavedPassword];
	validConfiguration &= 0 < password.length; 
	twcheck(validConfiguration);
	
	if (!validConfiguration)
		return;
    NSString *tokenURLString = [NSString
      stringWithFormat:@"%@authenticate?username=%@&password=%@",
      baseURL,
      login,
      password
   ];
   //twlog("calling %@ for token", tokenURLString);
=======
   
   BOOL validConfiguration = YES;
   
   NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
   NSString *scheme = [defaults boolForKey:kSavedUseSSL] ? @"https" : @"http";
   NSString *host = [defaults stringForKey:kSavedServerHost];
   validConfiguration &= 0 < host.length;
   NSString *port = [defaults stringForKey:kSavedServerPort];
   validConfiguration &= 0 < port.length;
   NSString *uri = [defaults stringForKey:kSavedServerURI];
   validConfiguration &= 0 < uri.length;
   
   if (validConfiguration)
   {
      result = [NSString
         stringWithFormat:@"%@://%@:%@/%@/identity",
         scheme,
         host,
         port,
         uri
      ];
   }
   
   return result;
}

- (void)retrieveTokenID
{
   [self logout];   
   
   BOOL validConfiguration = YES;
   
   NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
   NSString *login = [defaults stringForKey:kSavedLoginID];
   validConfiguration &= 0 < login.length;
   NSString *password = [defaults stringForKey:kSavedPassword];
   validConfiguration &= 0 < password.length;
   NSString *serverBase = self.baseURL;
   validConfiguration &= 0 < serverBase.length;
   twcheck(validConfiguration);
>>>>>>> .r95

   NSString *tokenResult = nil;
   if (validConfiguration)
   {
      NSString *tokenURLString = [NSString
         stringWithFormat:@"%@/authenticate?username=%@&password=%@",
         serverBase,
         login,
         password
      ];
      //twlog("calling %@ for token", tokenURLString);

      NSError *error = nil;
      tokenResult = [NSString
         stringWithContentsOfURL:[NSURL URLWithString:tokenURLString]
         encoding:NSNonLossyASCIIStringEncoding
         error:&error
      ];
      twlogif(nil != error, "token getting FAIL: %@", error);
   }
   
   if (tokenResult)
   {
      self.token = tokenResult;
      // looks like our result is sent with a prefix
      if ([self.token hasPrefix:@"token.id="])
      {
         // note that there is apparently also a trailing CR!
         self.token = [[self.token substringFromIndex:9] stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
      }

      // and it looks like stringByAddingPercentEscapesUsingEncoding isn't sufficient,
      // so we'll preprocess it here to remove '+' '/' and whatever other reserved characters might appear
      //twlog("receive token: %@", [PossoAppDelegate appDelegate].token);
      self.token = [(NSString *)CFURLCreateStringByAddingPercentEscapes(
         kCFAllocatorDefault, 
         (CFStringRef)self.token, 
         NULL, // escape all URL-illegal characters
         CFSTR(";/?:@&=+$,'"), // also escape URL-legal reserved characters
         kCFStringEncodingUTF8
     ) autorelease];
      
      //twlog("saved token: %@", [PossoAppDelegate appDelegate].token);
      [LogsViewController log:@"logged in"];
  }
   else
      [LogsViewController log:@"failed to log in"];
}

- (void)logout
{
   if (!self.token.length)
      return;

   BOOL validConfiguration = YES;
   NSString *serverBase = self.baseURL;
   validConfiguration &= 0 < serverBase.length;
   validConfiguration &= 0 < self.token.length;
   twcheck(validConfiguration);

   NSString *logoutURLString = [NSString
<<<<<<< .mine
      stringWithFormat:@"%@logout?subjectid=%@",
	  baseURL,
=======
      stringWithFormat:@"%@/logout?subjectid=%@",
      serverBase,
>>>>>>> .r95
      self.token
    ];

   // now we escape token on retrieval, including reserved but not illegal characters
   //logoutURLString = [logoutURLString stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];

   NSError *error = nil;
	NSString *logoutResult = [NSString
      stringWithContentsOfURL:[NSURL URLWithString:logoutURLString]
      encoding:NSNonLossyASCIIStringEncoding
      error:&error
   ];
   twlogif(nil != error, "logout getting FAIL: %@", error);
   // there's no result text returned by design
   (void)logoutResult;

   self.token = @"";
   
   [LogsViewController log:@"logged out"];
}

@end

